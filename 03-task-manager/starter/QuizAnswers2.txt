In this lesson, you created a middleware function called asyncWrapper. Why?

As we were supposed to use asyn/await, but when working with multiple tasks the (try and catch) code was repeated several times, So we wrote a reusable function or a middleware to use in each task and make our code more clean and shorter.

Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError(`There isn't any task with this id ${taskID}`, 404))
  }
  res.status(200).json({ task });
});